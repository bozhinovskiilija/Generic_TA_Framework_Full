name: Publish

on:
  workflow_dispatch:

  push:
    branches: [ develop ]

env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN}}
  GITHUB_ACTIONS_TOKEN: ${{ secrets.GH_TOKEN}}
  ORG_NAME: 'bozhinovskiilija'

jobs:
  build-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'
          cache: 'maven'

      - name: Update version in pom file
        shell: bash
        run: |
          mvn -B build-helper:parse-version versions:set '-DnewVersion=${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.nextIncrementalVersion}' '-DprocessAllModules=true' '-DgenerateBackupPoms=false' versions:commit '-DprocessAllModules'
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

      - name: Run maven install
        shell: bash
        run: |
          mvn install
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

      - name: Get updated project version
        id: projectversion
        shell: bash
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "::set-output name=NEW_VERSION::$VERSION"

      - name: Get repository name
        id: repositoryname
        shell: bash
        # gets repository name e.g., "Maersk-Global/some-repo" -> "some-repo".
        run: |
          NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')
          echo "::set-output name=REPOSITORY_NAME::$NAME"

      - name: Configure Git user
        shell: bash
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Publish JAR to GitHub packages
        shell: bash
        run: mvn clean deploy -X
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

      - name: Commit and Push version update
        shell: bash
        run: |
          git add .
          git commit -m "[skip actions] Version update ${{ steps.projectversion.outputs.NEW_VERSION }}"
          git tag -a v${{ steps.projectversion.outputs.NEW_VERSION }} -m "v${{ steps.projectversion.outputs.NEW_VERSION }}"
          git push --follow-tags

